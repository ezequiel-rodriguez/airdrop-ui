/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type AirdropInfoStruct = {
  airdropName: string;
  airdropAddress: AddressLike;
  totalAirdropAmount: BigNumberish;
  airdropAmountLeft: BigNumberish;
  claimAmount: BigNumberish;
  expirationDate: BigNumberish;
  airdropType: BigNumberish;
  uri: string;
};

export type AirdropInfoStructOutput = [
  airdropName: string,
  airdropAddress: string,
  totalAirdropAmount: bigint,
  airdropAmountLeft: bigint,
  claimAmount: bigint,
  expirationDate: bigint,
  airdropType: bigint,
  uri: string
] & {
  airdropName: string;
  airdropAddress: string;
  totalAirdropAmount: bigint;
  airdropAmountLeft: bigint;
  claimAmount: bigint;
  expirationDate: bigint;
  airdropType: bigint;
  uri: string;
};

export interface IAirdropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowAddress"
      | "allowAddresses"
      | "claim"
      | "disallowAddress"
      | "disallowAddresses"
      | "getAirdropAmountLeft"
      | "getAirdropInfo"
      | "getBalance"
      | "getClaimAmount"
      | "getExpirationDate"
      | "getTotalAirdropAmount"
      | "hasClaimed"
      | "hasExpired"
      | "isAllowed"
      | "setRoot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowAddresses",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowAddresses",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropAmountLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpirationDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAirdropAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setRoot", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "allowAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disallowAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropAmountLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpirationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAirdropAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoot", data: BytesLike): Result;
}

export interface IAirdrop extends BaseContract {
  connect(runner?: ContractRunner | null): IAirdrop;
  waitForDeployment(): Promise<this>;

  interface: IAirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  allowAddresses: TypedContractMethod<
    [addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [user: AddressLike, amount_: BigNumberish, proof_: BytesLike[]],
    [void],
    "nonpayable"
  >;

  disallowAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  disallowAddresses: TypedContractMethod<
    [addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getAirdropAmountLeft: TypedContractMethod<[], [bigint], "view">;

  getAirdropInfo: TypedContractMethod<[], [AirdropInfoStructOutput], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getClaimAmount: TypedContractMethod<[], [bigint], "view">;

  getExpirationDate: TypedContractMethod<[], [bigint], "view">;

  getTotalAirdropAmount: TypedContractMethod<[], [bigint], "view">;

  hasClaimed: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  hasExpired: TypedContractMethod<[], [boolean], "view">;

  isAllowed: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  setRoot: TypedContractMethod<[_root: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowAddresses"
  ): TypedContractMethod<[addresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [user: AddressLike, amount_: BigNumberish, proof_: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disallowAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disallowAddresses"
  ): TypedContractMethod<[addresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAirdropAmountLeft"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAirdropInfo"
  ): TypedContractMethod<[], [AirdropInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getClaimAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpirationDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalAirdropAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasExpired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAllowed"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setRoot"
  ): TypedContractMethod<[_root: BytesLike], [void], "nonpayable">;

  filters: {};
}
